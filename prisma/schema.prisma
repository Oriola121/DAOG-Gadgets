// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?   @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  products    Product[]
}

model Product {
  id             Int         @id @default(autoincrement())
  name           String      @db.VarChar(255)
  description    String?     @db.Text
  price          Decimal     @db.Decimal(10, 2)
  categoryId     Int?        @map("category_id")
  stock          Int         @default(0)
  imageUrl       String?     @map("image_url") @db.VarChar(255)
  brand          String?     @db.VarChar(100)
  model          String?     @db.VarChar(100)
  specifications String?     @db.Text
  createdAt      DateTime    @default(now()) @map("created_at")
  category       Category?   @relation(fields: [categoryId], references: [id])
  orderItems     OrderItem[]
  reviews        Review[]
}

model Customer {
  id           Int      @id @default(autoincrement())
  firstName    String   @map("first_name") @db.VarChar(100)
  lastName     String   @map("last_name") @db.VarChar(100)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  phone        String?  @db.VarChar(20)
  address      String?  @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  orders       Order[]
  reviews      Review[]
}

model Order {
  id              Int         @id @default(autoincrement())
  customerId      Int?        @map("customer_id")
  orderDate       DateTime    @default(now()) @map("order_date")
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  status          OrderStatus @default(pending)
  shippingAddress String?     @map("shipping_address") @db.Text
  paymentStatus   PayStatus   @default(pending) @map("payment_status")
  customer        Customer?   @relation(fields: [customerId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int     @map("order_id")
  productId   Int     @map("product_id")
  quantity    Int
  priceAtTime Decimal @map("price_at_time") @db.Decimal(10, 2)
  order       Order   @relation(fields: [orderId], references: [id])
  product     Product @relation(fields: [productId], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  productId  Int      @map("product_id")
  customerId Int      @map("customer_id")
  rating     Int      @db.Int
  comment    String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  product    Product  @relation(fields: [productId], references: [id])
  customer   Customer @relation(fields: [customerId], references: [id])
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
}

enum PayStatus {
  pending
  paid
  failed
}

